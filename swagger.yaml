openapi: 3.0.0
info:
  title: Plan API
  version: 1.0.0
  description: Rise API Docs

paths:
  /plans:
    post:
      summary: Create a new plan
      tags:
        - Plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlanDTO"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
      security:
        - headlessAuth: []

    get:
      summary: Admin/User List plans
      tags:
        - Plans
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, completed]
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPlanResult"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}:
    get:
      summary: Fetch a specific plan
      tags:
        - Plans
      parameters:
        - $ref: "#/components/parameters/PlanId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

    patch:
      summary: Edit a plan
      tags:
        - Plans
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditPlanDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a plan
      tags:
        - Plans
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
        "403":
          description: Forbidden
        "404":
          description: Not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}/history:
    get:
      summary: Fetch plan history
      tags:
        - Plans
      parameters:
        - $ref: "#/components/parameters/PlanId"
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMaturityLogResult"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/{id}/config:
    post:
      summary: Set plan configuration
      tags:
        - Plans
      parameters:
        - $ref: "#/components/parameters/PlanId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}/toggle-reinvest:
    post:
      summary: Toggle plan reinvestment
      tags:
        - Plans
      parameters:
        - $ref: "#/components/parameters/PlanId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /config:
    get:
      summary: Get custom plans from oracle
      tags:
        - Plans
      parameters:
        - in: query
          name: entity
          schema:
            type: string
            default: custom_plan
        - in: query
          name: filter_key
          schema:
            type: string
            enum: [category, is_live, pure]
            example: category
        - in: query
          name: filter_value
          schema:
            type: string
            enum: [goal]
            example: goal
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPlans"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /gifts:
    post:
      summary: Create a new gift
      tags:
        - Gifts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendGiftDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /gifts/{giftId}/{action}:
    post:
      summary: Accept or decline a gift
      tags:
        - Gifts
      parameters:
        - in: path
          name: giftId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: action
          required: true
          schema:
            type: string
            enum: [accept, decline]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "404":
          description: Gift not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /gifts/{id}/cancel:
    patch:
      summary: Cancel a gift
      tags:
        - Gifts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "403":
          description: Forbidden
        "404":
          description: Gift not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/transaction-requests:
    post:
      summary: Fund or withdraw from a plan
      tags:
        - Transaction Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanTransactionDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Plan not found
        "422":
          description: Unprocessable entity

components:
  parameters:
    pageParam:
      in: query
      name: page
      schema:
        type: integer
    limitParam:
      in: query
      name: limit
      schema:
        type: integer
    orderParam:
      in: query
      name: order
      schema:
        type: string
        enum: [asc, desc]
        default: asc

    PlanId:
      name: id
      in: path
      required: true
      description: The ID of the plan
      schema:
        type: string
        format: uuid

  schemas:
    CreatePlanDTO:
      type: object
      required:
        - plan_name
        - plan_type
        - owner_id
        - portfolio_config
        - duration
      properties:
        plan_name:
          type: string
        plan_type:
          $ref: "#/components/schemas/PlanType"
        owner_id:
          type: string
          format: uuid
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        cycle:
          type: number
          default: 1
        duration:
          type: number
        metadata: 
          type: object
          properties:
            goal_amount: 
              type: number
            created_by:
              type: string

    EditPlanDTO:
      type: object
      properties:
        plan_name:
          type: string
        picture:
          type: string
          format: uri
          nullable: true

    PaginatedPlanResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
        item_count:
          type: integer

    MaturityLog:
      type: object
      properties:
        plan_id:
          type: string
        owner_id:
          type: string
        matured_at:
          type: string
          format: date-time
        cycle:
          type: number
        capital:
          type: number
        total_returns:
          type: number
        available_returns:
          type: number
        total_funded:
          type: number
        total_withdrawn:
          type: number
        created_at:
          type: string
          format: date-time

    PaginatedMaturityLogResult:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MaturityLog"
        meta:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer

    ConfigDTO:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/PlanConfigType"
        config:
          oneOf:
            - $ref: "#/components/schemas/AutoInvestConfigDTO"
            - $ref: "#/components/schemas/PortfolioConfig"
      required:
        - type
        - config

    PlanConfigType:
      type: string
      enum:
        - autofund
        - portfolio

    AutoInvestConfigDTO:
      type: object
      properties:
        auto_invest_enabled:
          type: boolean
        auto_invest_frequency:
          $ref: "#/components/schemas/AutoInvestFrequency"
        auto_invest_config:
          $ref: "#/components/schemas/AutoInvestConfig"

    AutoInvestConfig:
      type: object
      properties:
        month_day:
          type: integer
          format: int32
          minimum: 1
          maximum: 31
        week_day:
          type: integer
          format: int32
          minimum: 1
          maximum: 7
        hour:
          type: integer
          format: int32
          minimum: 0
          maximum: 23
        amount:
          type: number
          format: double
        current_attempt_count:
          type: integer
          format: int32

    PortfolioConfig:
      type: object
      description: >
        List of one or more UUID keys mapping to PortfolioConfigData objects.
      properties:
        a81bc81b-dead-4e5d-abff-90865d1e13b1:
          $ref: "#/components/schemas/PortfolioConfigData"
        b21dc81b-bcde-4e5d-bcda-90865d1e13b2:
          $ref: "#/components/schemas/PortfolioConfigData"

    PortfolioConfigData:
      type: object
      properties:
        percentage:
          type: number
          format: double
        asset_class:
          $ref: "#/components/schemas/AssetClass"

    AssetClass:
      type: string
      description: The class of asset in the portfolio
      example: stock

    PlanStatus:
      type: string
      enum:
        - active
        - inactive
        - completed
        - pending

    AutoInvestFrequency:
      type: string
      enum:
        - daily
        - weekly
        - monthly

    PlanType:
      type: string
      enum:
        - Savings
        - Build Wealth
        - Rent
        - Wedding
        - Kids
        - Business
        - School
        - Fixed Income
        - Stocks
        - Real Estate
        - Home
        - Travel

    Plan:
      type: object
      properties:
        plan_name:
          type: string
        owner_id:
          type: string
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        status:
          $ref: "#/components/schemas/PlanStatus"
        duration:
          type: number
        cycle:
          type: number
        capital:
          type: number
        investment:
          type: number
        picture:
          type: string
          nullable: true
        reinvest:
          type: boolean
        auto_invest_enabled:
          type: boolean
        auto_invest_frequency:
          $ref: "#/components/schemas/AutoInvestFrequency"
        auto_invest_config:
          $ref: "#/components/schemas/AutoInvestConfig"
        next_auto_invest_date:
          type: string
          format: date-time
        next_compound_date:
          type: string
          format: date-time
        total_funded:
          type: number
        total_withdrawn:
          type: number
        total_returns:
          type: number
        available_returns:
          type: number
        maturity_date:
          type: string
          format: date-time
        plan_type:
          $ref: "#/components/schemas/PlanType"
        metadata:
          type: object
          properties:
              created_by:
                type: string
              goal_amount:
                type: number
              is_gifted:
                type: boolean
      required:
        - plan_name
        - owner_id
        - portfolio_config
        - status
        - duration
        - cycle
        - capital
        - investment
        - reinvest
        - auto_invest_enabled
        - auto_invest_frequency
        - auto_invest_config
        - next_auto_invest_date
        - next_compound_date
        - total_funded
        - total_withdrawn
        - total_returns
        - available_returns
        - maturity_date
        - plan_type

    SendGiftDTO:
      type: object
      required:
        - plan_name
        - portfolio_config
        - amount
        - duration
        - description
        - recipient_identifier
        - plan_type
      properties:
        plan_name:
          type: string
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        amount:
          type: number
          format: float
          minimum: 0
        duration:
          type: integer
          format: int32
          minimum: 1
        description:
          type: string
        recipient_identifier:
          type: string
        plan_type:
          $ref: "#/components/schemas/PlanType"

    Gift:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        recipient_identifier:
          type: string
          format: uuid
        plan_name:
          type: string
        amount:
          type: number
        duration:
          type: integer
        description:
          type: string
        status:
          type: string
          enum: [pending, accepted, declined, cancelled]
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        plan_type:
          $ref: "#/components/schemas/PlanType"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlanTransactionDTO:
      type: object
      required:
        - plan_id
        - owner_id
        - amount
        - type
      properties:
        plan_id:
          type: string
        owner_id:
          type: string
          format: uuid
        amount:
          type: number
        type:
          type: string
          enum: [funding, withdrawal]
        should_waive_charges:
          type: boolean
          default: false
        penalty_fee_percent:
          type: integer
          minimum: 1
          maximum: 99
        transaction_request_id:
          type: string
          format: uuid

    CustomPlans:
      type: array
      items:
        $ref: "#/components/schemas/CustomPlan"

    CustomPlan:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        plan_type:
          type: string
        description:
          type: string
        landing_page_image:
          type: string
        plan_image:
          type: string
        is_live:
          type: boolean
        has_add_money_screen:
          type: string

  securitySchemes:
    headlessAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication for headless operations
